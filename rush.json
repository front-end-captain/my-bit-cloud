/**
 * This is the main configuration file for Rush.
 * For full documentation, please see https://rushjs.io
 */
{
  "$schema": "https://developer.microsoft.com/json-schemas/rush/v5/rush.schema.json",
  "rushVersion": "5.76.1",
  "pnpmVersion": "7.9.0",

  "pnpmOptions": {
    // "pnpmStore": "local",
    "strictPeerDependencies": true,
    "preventManualShrinkwrapChanges": true,
    "useWorkspaces": true
  },
  "nodeSupportedVersionRange": ">=12.13.0 <13.0.0 || >=14.15.0 <15.0.0 || >=16.13.0 <17.0.0",
  "suppressNodeLtsWarning": false,
  "ensureConsistentVersions": true,
  "projectFolderMinDepth": 2,
  "projectFolderMaxDepth": 2,
  "allowMostlyStandardPackageNames": true,

  /**
   * This feature helps you to review and approve new packages before they are introduced
   * to your monorepo.  For example, you may be concerned about licensing, code quality,
   * performance, or simply accumulating too many libraries with overlapping functionality.
   * The approvals are tracked in two config files "browser-approved-packages.json"
   * and "nonbrowser-approved-packages.json".  See the Rush documentation for details.
   */
  // "approvedPackagesPolicy": {
  //   /**
  //    * The review categories allow you to say for example "This library is approved for usage
  //    * in prototypes, but not in production code."
  //    *
  //    * Each project can be associated with one review category, by assigning the "reviewCategory" field
  //    * in the "projects" section of rush.json.  The approval is then recorded in the files
  //    * "common/config/rush/browser-approved-packages.json" and "nonbrowser-approved-packages.json"
  //    * which are automatically generated during "rush update".
  //    *
  //    * Designate categories with whatever granularity is appropriate for your review process,
  //    * or you could just have a single category called "default".
  //    */
  //   "reviewCategories": [
  //     // Some example categories:
  //     "production", // projects that ship to production
  //     "tools",      // non-shipping projects that are part of the developer toolchain
  //     "prototypes"  // experiments that should mostly be ignored by the review process
  //   ],
  // 
  //   /**
  //    * A list of NPM package scopes that will be excluded from review.
  //    * We recommend to exclude TypeScript typings (the "@types" scope), because
  //    * if the underlying package was already approved, this would imply that the typings
  //    * are also approved.
  //    */
  //   // "ignoredNpmScopes": ["@types"]
  // },

  "gitPolicy": {
    // "allowedEmailRegExps": [],
    // "sampleEmail": "",
    "versionBumpCommitMessage": "Bump versions [skip ci]",
    "changeLogUpdateCommitMessage": "Update changelogs [skip ci]"
  },

  "repository": {
    "url": "https://github.com/front-end-captain/my-bit-cloud",
    "defaultBranch": "main",
    "defaultRemote": "origin"
  },

  "eventHooks": {
    "preRushInstall": [],
    "postRushInstall": [],
    "preRushBuild": [],
    "postRushBuild": []
  },

  "variants": [
    // {
    //   /**
    //    * The folder name for this variant.
    //    */
    //   "variantName": "old-sdk",
    // 
    //   /**
    //    * An informative description
    //    */
    //   "description": "Build this repo using the previous release of the SDK"
    // }
  ],
  // "telemetryEnabled": false,

  // "hotfixChangeEnabled": false,

  "allowedProjectTags": ["libs", "aspects", "apps", "shared"],

  "projects": [
    {
      "packageName": "@unknown/harmony",
      "projectFolder": "libs/harmony",
      "tags": ["libs"],
      "shouldPublish": false
    },
    {
      "packageName": "@unknown/bootstrap",
      "projectFolder": "apps/bootstrap",
      "tags": ["apps"],
      "shouldPublish": false
    },
    {
      "packageName": "@unknown/eslint-config",
      "projectFolder": "shared/eslint-config",
      "tags": ["shared"],
      "shouldPublish": false
    },
    {
      "packageName": "@unknown/ts-config",
      "projectFolder": "shared/ts-config",
      "tags": ["shared"],
      "shouldPublish": false
    },
    {
      "packageName": "@unknown/scope",
      "projectFolder": "aspects/scope",
      "tags": ["aspects"],
      "shouldPublish": false
    },
    {
      "packageName": "@unknown/viking",
      "projectFolder": "aspects/viking",
      "tags": ["aspects"],
      "shouldPublish": false
    },
    {
      "packageName": "@unknown/express",
      "projectFolder": "aspects/express",
      "tags": ["aspects"],
      "shouldPublish": false
    },
    {
      "packageName": "@unknown/graphql",
      "projectFolder": "aspects/graphql",
      "tags": ["aspects"],
      "shouldPublish": false
    },
    {
      "packageName": "@unknown/network",
      "projectFolder": "libs/network",
      "tags": ["libs"],
      "shouldPublish": false
    },
    {
      "packageName": "@unknown/react.rendering.ssr",
      "projectFolder": "libs/react.rendering.ssr",
      "tags": ["libs"],
      "shouldPublish": false
    },
    {
      "packageName": "@unknown/ui-foundation.ui.rendering.html",
      "projectFolder": "libs/ui-foundation.ui.rendering.html",
      "tags": ["libs"],
      "shouldPublish": false
    },
    {
      "packageName": "@unknown/base-ui.utils.composer",
      "projectFolder": "libs/base-ui.utils.composer",
      "tags": ["libs"],
      "shouldPublish": false
    }
  ]
}
